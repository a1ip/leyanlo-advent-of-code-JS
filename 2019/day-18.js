const inputIdx = 5;

const dirs = [
  [0, 1],
  [1, 0],
  [0, -1],
  [-1, 0],
];

const memo = {};

function getMinPath(map, curr, keys, doors) {
  // found all keys
  if (!Object.keys(keys).length) {
    return { minSteps: 0, minPathKeys: [] };
  }

  const queue = dirs.map((dir) => ({
    coords: [curr[0] + dir[0], curr[1] + dir[1]],
    steps: 1,
    pathKeys: [],
  }));
  const seen = {
    [curr.join()]: true,
  };
  let minSteps = 0;
  let minPathKeys = [];
  while (queue.length) {
    const {
      coords: [row, col],
      steps,
      pathKeys,
    } = queue.shift();
    const char = map[row][col];
    if (seen[[row, col].join()]) {
      // skip if seen
      continue;
    }
    seen[[row, col].join()] = true;

    if (char === '#' || /[A-Z]/.test(char)) {
      // skip walls and doors
    } else if (char === '.') {
      queue.push(
        ...dirs.map((dir) => ({
          coords: [row + dir[0], col + dir[1]],
          steps: steps + 1,
          pathKeys: [...pathKeys],
        }))
      );
    } else if (/[a-z]/.test(char)) {
      const nextRows = map.map((row) => [...row]);
      nextRows[row][col] = '.';
      const door = doors[char.toUpperCase()];
      if (door) {
        // unlock door if present
        nextRows[door[0]][door[1]] = '.';
      }
      const nextStart = [row, col];
      const nextKeys = { ...keys };
      delete nextKeys[char];
      const nextDoors = { ...doors };
      delete nextDoors[char.toUpperCase()];
      const memoKey = [...nextStart, ...Object.keys(nextKeys)].join();
      const minPath =
        memo[memoKey] || getMinPath(nextRows, nextStart, nextKeys, nextDoors);
      memo[memoKey] = minPath;
      if (minSteps === 0 || steps + minPath.minSteps < minSteps) {
        minSteps = steps + minPath.minSteps;
        minPathKeys = [char, ...minPath.minPathKeys];
      }
    }
  }
  return { minSteps, minPathKeys };
}

function solve(input) {
  const map = input.split('\n').map((row) => row.split(''));
  let curr;
  const keys = {};
  const doors = {};
  for (let i = 0; i < map.length; i++) {
    for (let j = 0; j < map[i].length; j++) {
      if (map[i][j] === '@') {
        // remove @ and keep track of curr separately
        map[i][j] = '.';
        curr = [i, j];
      } else if (/[a-z]/.test(map[i][j])) {
        keys[map[i][j]] = [i, j];
      } else if (/[A-Z]/.test(map[i][j])) {
        doors[map[i][j]] = [i, j];
      }
    }
  }

  console.log(getMinPath(map, curr, keys, doors).minSteps);
}

const inputs = [];
inputs.push(`#########
#b.A.@.a#
#########`);

inputs.push(`########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################`);

inputs.push(`########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################`);

inputs.push(`#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################`);

inputs.push(`########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################`);

inputs.push(`#################################################################################
#.#.....#.........#...S.#...............#...............#.......#.....#.........#
#.#.#.###.#.#####.#.###.#.###########.#.#.###.###########.###.#E#.###.#.#.#######
#...#.....#.#...#.#.#.#.#.#.........#.#.#...#.#...#.....#...#.#.#...#...#.#.....#
#.#########.#.#.###.#.#.###.#######I###.#.#.#.#.#.#.###.###.#.#.#.#.#####.#.###.#
#.#.......#...#...#s#.#.#...#.#.....#...#.#.#.#.#.#.#.#...#.#.#.#.#...#.U.#...#.#
#.#R#####.#######.#.#.#.#.###.#.#####.#.#.#.###.#.#.#B#.#.#.#.#.#####.#.#####.#.#
#.#.#...#.#.....#...#.#..i....#n#.....#.#.#.....#.....#.#.#.#.#.......#.#.....#.#
#.#.###.#.#.#.#.#####.#######.#.#.#.###.#.#############.###.#.###.#####.#.#####.#
#.#..l..#.#.#.#.#.......#...#.#.#.#.#.#.#...#.....#.#...#...#.#...#...#.#.....#w#
#.#.#####.#.#.###.#.###.#N#.###.###.#.#.###.#.###.#.#.###.###.#####.#.#######G#.#
#.#.#...#...#.....#.#...#.#.....#...#.#.#...#...#...#c......#.....#.#r........#.#
#.###.#.#####.#####.#.###.#######.###.#.#.#####.###########.#####.#.###########.#
#....g#.....#.....#.#...#...#.....#...#.#.#...#.#.....#...#...#...#...#...#.....#
###########W#######.#######.#####.###.#.#.#.#.#.#.###.#.#.#####F#####.#.###.#####
#...#.....#.........#......o#...#...#...#.#.#...#.#.#.#.#...#...#.....#.#...#...#
#.#.#.#.#######.#####.#######.#.###.#.###.#.#####.#.#.#.###.#.#.#.#####.#.###.#.#
#v#.#.#.........#j..#.#.......#.....#.#.#.#...#.....#.#.#...#.#.#.#...#...#..q#.#
###.#.###########.#.#.###.###########.#.#.###.#.#####.#.#.###.#.#.#.###.###.#.#.#
#...#.#.......#...#.O.#...#.#.......#...#...#...#...#.#.#.....#.#.#.#..k#...#.#.#
#.#.#K#.#P###.#.#######.###.#.#.#######.###.#####.#.#.#.###.#####.#.#.###.###.#.#
#.#.#.#.#...#.#.#.....#.#...#.#.........#.#.......#.#.#.#...#.L...#...#.#.#.#.#.#
#.#.#.#####.#.#.#.#####.#.#.#.###########.#########.#.#.###########.###.#.#.#H#.#
#.#.#.......#.#.J.#.....#.#.#...........#...#...#...#.#...#...V...#...#...#.#.#.#
#.###########.#####.###.#.#############.#.#.#.#.#.###.###.#.###.#.###.#.###.#.###
#.........#...#.......#.#.........#.#...#.#...#.#.....#.#...#.#.#..p#.#.....#...#
#.#####.###.###########.#.#.#####.#.#.###.#####.#####.#.#####.#.#####.#####.###.#
#.#...#...#...#.....#...#.#.....#...#...#.....#...#.#.#...#...#.#.....#.#...#.#.#
#.#.#.###.###.#.###.#.###.#####.#######.#####.###.#.#.###.#.#.#.#.#####.#.###.#.#
#.#.#...#...#.#.#...#.#.#...#.#.........#.....#...#.#...#.#.#.#...#.....#.....#.#
#.#.###.###.#.#.#.###.#.###.#.###########.#######.#.###.#.#.#.#####.#.#.#####.#.#
#.#.#.....#.#.#.#.....#.....#.......#...#.#.....#.....#.#...#.......#.#...#...#.#
#.#.#####.#.#.#.#######.#####.#.###.###.#.#.###.#####.#.#############.#####.###.#
#.#...#.#.#...#.#.....#.#...#.#...#.#...#.#.#.#.....#.#...#...#.....#...#...#...#
#.#.#.#.#.#####.#.#####.#.#Y#.###.#.#.###.#.#.#####.#####.#.#.#.###.###.#.###D#.#
#.#.#.#.#.#.....#.....#.#.#.....#.#.#...#.#...#.....#...#...#...#.#...#.....#.#.#
#.###.#.#.#####.#.###.#.#########.#.#.#.#.###.#.###.#.#.#########.###.#####.#.#.#
#.....#.#.....#.#...#.#...#.......#.#.#.#.....#...#.#.#.....#.......#.....#.#.#.#
#######.#####.#.###.#.###.#.#######.###.#.#######.###.#####.#.#####.#####.###.#.#
#...............#m..#.......#...................#.........#.......#...........#.#
#######################################.@.#######################################
#...........#.....#...............#.......#......y....#.......#...A...#.........#
#.###.#####.###.#.#.#############.#.#.###.#.###.#####.#.#####.#.#####.###.#####.#
#.#...#t..#x....#.#.#...........#.#.#...#.....#.#...#.#.#...#...#...#...#.....#.#
#.#.###.#.#######.#.#.#########.#.#.###.#.#####.#.###.#.#.#.#####.#.###.#####.###
#.#.....#.#.....#...#d#...#.....#.#.#.#.#.#.....#.#.....#.#.#.....#.#...#...#...#
#.#######.#.#######.#.###.#.#####.#.#.#.#.#.#####.#.#####.#.#.#######.###.#.###.#
#.#.......#.........#.....#.#.....#...#.#.#.#...#...#.....#.#.......#...M.#.....#
#.#.#########.###########.#.#####.###.#.#.#.#.#.#####.#####.#.#####.###########.#
#.#.........#.......#...#.#.....#.#...#.#.#...#.......#.#...#.....#.....#.......#
#.#########.#######.###.#.#####.#.#.###.#.###########.#.#.#############.#.#######
#.....#...#.#.......#...#.#a....#.#.#.#.#.#...#.....#...#.........#.....#.....#.#
#####.#.#.#.#.#######.###.#.#######.#.#.#.###.#.###.###.#########.#.#########.#.#
#.......#z#.#.........#...#...#.......#.#.....#.#...#.........#...#.........#.#.#
###########.#######.###.#####.#.#######.#####.#.###.#########.#.#########.###.#X#
#.........#.......#.#...#...#.....#...#.#.....#...#...#.......#.#.........#...#.#
#.#######.#######.###.###.#.#.#####.#.#.#.#####.#.###.#.#####.#.###.#.#####.###.#
#.#.....#.......#.......#.#.#.#.....#.#.#.#...#.#.#.#.#.#...#.#.#...#.#.....#...#
#.#.###.#######.#########.#.###.#####.#.#.#.#.###.#.#.###.#.###.#.###.#.#######.#
#...#.#.......#...#...#...#.#...#...#.#.#.#.#.#...#.#.....#.....#...#.#.#.......#
#####.#######.###.#.#.#.###.#.###.#.#.#.###.#.#.###.#######.#######.###.#.#####.#
#...........#.#.#...#.#.#.#...#.#.#...#.#...#.#.#.......#...#.....#.....#.....#.#
#.#######.#.#.#.#######.#.#####.#.#####.#.###.#.#.#######.#######.#.#########T#.#
#...#...#.#.#.#.......#.#......e#.#.....#.#.....#.........#.....#.#.......#...#.#
#####.#.###.#.#####.#.#.#.#####.#.#.#.###.#############.###.#.#.#.#######.#.###.#
#.....#...#.#.....#.#...#.....#.#.#.#...#.#...........#.#...#.#.#...#.....#.#.#.#
#.#######.#.#####.#.#######.#.#.#.#####.#.#.#########.###.###.#####.#.#####.#.#.#
#.......#.....#.#...#.....#.#.#.#.#.....#...#.....#.#.....#.#.....#.#.....#.#...#
#.#####.#####.#.#####.###.###.#.#.#.#########.###.#.#######.#####.#.#####.#.#.###
#...#.#.....#.........#.......#.#.#.....#...#...#.#.......#.....#...#...#...#...#
###.#.#####.###########.#########.#.###.#.###.#.#.#####.#.#.#.#######.#########.#
#.#.....#...#...#.......#.........#...#.#...#.#.#.....#.#.#.#.................#.#
#.#####.#.###.#C#.#####.#.###########.#.#.#.#.#.#####.###.#.#############.###.#.#
#...#...#...#.#...#...#.#.#...#...#...#.#.#...#.#...#.#...#.#.......#...#.#.#.#.#
#.###.#####.###.###.#.###.#.#.#.#.#####.#.#####.#.###.#.#.#.#.#####.#.#.#.#.#.#.#
#...#.....#...#...#.#...#.#.#...#...#...#.#...#.#.......#.#.#.#...#.#.#...#...#.#
#.#.###.#####.#####.###.#.#.#######.#.#.#.###.#.#######.###.#.#.#.#.#.#####.###.#
#.#...#.#.....#...#...#.#.#...#...#.#.#.#.....#...#f..#.#...#u#.#...#....b#.#...#
#.###.#.#.#####Q#.###.#.#.###.#.###.#.#.#####.###.#.#.###.#####.###.#####.###Z###
#...#...#.......#.....#....h..#.......#.#.......#...#...........#.......#.......#
#################################################################################`);

solve(inputs[inputIdx]);
